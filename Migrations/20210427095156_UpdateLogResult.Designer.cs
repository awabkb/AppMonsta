// <auto-generated />
using System;
using IMK_web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IMK_web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210427095156_UpdateLogResult")]
    partial class UpdateLogResult
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("IMK_web.Models.AspCompany", b =>
                {
                    b.Property<int>("AspId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("AspId");

                    b.HasIndex("CountryCode");

                    b.ToTable("AspCompanies");
                });

            modelBuilder.Entity("IMK_web.Models.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Code");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("IMK_web.Models.IMK_Functions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Alarms")
                        .HasColumnType("int");

                    b.Property<int>("CPRI")
                        .HasColumnType("int");

                    b.Property<int>("FRU")
                        .HasColumnType("int");

                    b.Property<int>("IPInterfaces")
                        .HasColumnType("int");

                    b.Property<int>("IPROUT")
                        .HasColumnType("int");

                    b.Property<int>("RETAntenna")
                        .HasColumnType("int");

                    b.Property<int>("RSSILTE")
                        .HasColumnType("int");

                    b.Property<int>("RSSINR")
                        .HasColumnType("int");

                    b.Property<int>("RSSIUMTS")
                        .HasColumnType("int");

                    b.Property<int>("RetSerial")
                        .HasColumnType("int");

                    b.Property<int>("VSWR")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IMK_Functions");
                });

            modelBuilder.Entity("IMK_web.Models.ImkVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AppVersion")
                        .HasColumnType("double");

                    b.Property<DateTime>("DateOfRelease")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("RPIVersion")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("ImkVersions");
                });

            modelBuilder.Entity("IMK_web.Models.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Command")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Result")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("SiteVisitVisitId")
                        .HasColumnType("int");

                    b.HasKey("LogId");

                    b.HasIndex("SiteVisitVisitId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("IMK_web.Models.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("IMK_web.Models.Site", b =>
                {
                    b.Property<int>("SiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AspCompanyAspId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("int");

                    b.Property<string>("longitude")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SiteId");

                    b.HasIndex("AspCompanyAspId");

                    b.HasIndex("OperatorId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("IMK_web.Models.SiteVisit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("IMK_FunctionsId")
                        .HasColumnType("int");

                    b.Property<int?>("ImkVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("VistedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("VisitId");

                    b.HasIndex("IMK_FunctionsId");

                    b.HasIndex("ImkVersionId");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("SiteVisits");
                });

            modelBuilder.Entity("IMK_web.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int?>("AspCompanyAspId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId");

                    b.HasIndex("AspCompanyAspId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IMK_web.Models.AspCompany", b =>
                {
                    b.HasOne("IMK_web.Models.Country", null)
                        .WithMany("AspCompanies")
                        .HasForeignKey("CountryCode");
                });

            modelBuilder.Entity("IMK_web.Models.Log", b =>
                {
                    b.HasOne("IMK_web.Models.SiteVisit", null)
                        .WithMany("Logs")
                        .HasForeignKey("SiteVisitVisitId");
                });

            modelBuilder.Entity("IMK_web.Models.Operator", b =>
                {
                    b.HasOne("IMK_web.Models.Country", null)
                        .WithMany("Operators")
                        .HasForeignKey("CountryCode");
                });

            modelBuilder.Entity("IMK_web.Models.Site", b =>
                {
                    b.HasOne("IMK_web.Models.AspCompany", "AspCompany")
                        .WithMany("Sites")
                        .HasForeignKey("AspCompanyAspId");

                    b.HasOne("IMK_web.Models.Operator", "Operator")
                        .WithMany("Sites")
                        .HasForeignKey("OperatorId");

                    b.Navigation("AspCompany");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("IMK_web.Models.SiteVisit", b =>
                {
                    b.HasOne("IMK_web.Models.IMK_Functions", "IMK_Functions")
                        .WithMany()
                        .HasForeignKey("IMK_FunctionsId");

                    b.HasOne("IMK_web.Models.ImkVersion", "ImkVersion")
                        .WithMany()
                        .HasForeignKey("ImkVersionId");

                    b.HasOne("IMK_web.Models.Site", "Site")
                        .WithMany("SiteVisits")
                        .HasForeignKey("SiteId");

                    b.HasOne("IMK_web.Models.User", "User")
                        .WithMany("SiteVisits")
                        .HasForeignKey("UserId");

                    b.Navigation("IMK_Functions");

                    b.Navigation("ImkVersion");

                    b.Navigation("Site");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMK_web.Models.User", b =>
                {
                    b.HasOne("IMK_web.Models.AspCompany", "AspCompany")
                        .WithMany("Workers")
                        .HasForeignKey("AspCompanyAspId");

                    b.Navigation("AspCompany");
                });

            modelBuilder.Entity("IMK_web.Models.AspCompany", b =>
                {
                    b.Navigation("Sites");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("IMK_web.Models.Country", b =>
                {
                    b.Navigation("AspCompanies");

                    b.Navigation("Operators");
                });

            modelBuilder.Entity("IMK_web.Models.Operator", b =>
                {
                    b.Navigation("Sites");
                });

            modelBuilder.Entity("IMK_web.Models.Site", b =>
                {
                    b.Navigation("SiteVisits");
                });

            modelBuilder.Entity("IMK_web.Models.SiteVisit", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("IMK_web.Models.User", b =>
                {
                    b.Navigation("SiteVisits");
                });
#pragma warning restore 612, 618
        }
    }
}
